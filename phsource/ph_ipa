phoneme 11
  stress
  Tone(10, 10, envelope/p_level, NULL)
endphoneme

phoneme 12
  stress
  Tone(10, 20, envelope/p_rise, NULL)
endphoneme

phoneme 13
  stress
  Tone(10, 30, envelope/p_rise, NULL)
endphoneme

phoneme 2
  stress
  Tone(20, 20, envelope/p_level, NULL)
endphoneme

phoneme 20 //  nặng Tone(drop  (constricted)
  stress
  Tone(34, 10, envelope/p_512, envelope/vi_6amp) //40 20
endphoneme

phoneme 21
  stress
  Tone(20, 10, envelope/p_fall, NULL)
endphoneme

phoneme 212
  stress
  Tone(10, 20, envelope/p_fallrise, NULL)  // FIXME
endphoneme

phoneme 213
  stress
  Tone(10, 30, envelope/p_214, NULL)  // FIXME
endphoneme

phoneme 214
  stress
  Tone(10, 40, envelope/p_214, NULL)
endphoneme

phoneme 22
  stress
  Tone(20, 20, envelope/p_level, NULL)
endphoneme

phoneme 222
  stress
  Tone(23, 15, envelope/p_level, NULL)  // FIXME
endphoneme

phoneme 221
  stress
  Tone(20, 8, envelope/p_fall, NULL)  // FIXME
endphoneme

phoneme 223
  stress
  length 180
  Tone(20, 30, envelope/p_rise, envelope/vi_5amp)
endphoneme

phoneme 23
  stress
  Tone(20, 30, envelope/p_rise, NULL)
endphoneme

phoneme 24
  stress
  Tone(20, 40, envelope/p_rise, NULL)
endphoneme

phoneme 3
  stress
  Tone(30, 30, envelope/p_level, NULL)
endphoneme

phoneme 31
  stress
  Tone(30, 10, envelope/p_fall, NULL)
endphoneme

phoneme 313
  stress
  Tone(10, 30, envelope/p_fallrise, NULL) //33 31
endphoneme

phoneme 32
  stress
  Tone(30, 20, envelope/p_fall, NULL)
endphoneme

phoneme 325
  stress
  Tone(34, 60,envelope/p_214, envelope/vi_5amp) // 28,58 20 80
endphoneme

phoneme 33
  stress
  Tone(30, 30, envelope/p_level, NULL)
  // vietnamese: Tone(27, 25, envelope/p_level, NULL) // 28 29
endphoneme

phoneme 335  // FIXME
  stress
  Tone(34, 60, envelope/p_214, envelope/vi_5amp)
endphoneme

phoneme 34
  stress
  Tone(30, 40, envelope/p_rise, NULL)
endphoneme

phoneme 35
  ipa ˧˥
  stress
  Tone(30, 50, envelope/p_rise, NULL)
endphoneme

phoneme 4
  stress
  Tone(40, 40, envelope/p_level, NULL)
endphoneme

phoneme 41
  stress
  Tone(40, 10, envelope/p_fall, NULL)
endphoneme

phoneme 42
  stress
  Tone(40, 20, envelope/p_fall, NULL)
endphoneme

phoneme 44
  stress
  Tone(38, 41, envelope/p_rise, NULL)
endphoneme

phoneme 445
  stress
  length 180
  Tone(40, 50, envelope/p_rise, envelope/vi_5amp)
endphoneme

phoneme 45
  stress
  Tone(40, 50, envelope/p_rise, NULL)
endphoneme

phoneme 46
  stress
  // Tone(40, 60, envelope/p_rise, NULL)
  length 180
  Tone(50, 60, envelope/p_rise, envelope/vi_5amp)
endphoneme

phoneme 5
  ipa 50
  stress
  Tone(50, 50, envelope/p_level, NULL)
endphoneme

phoneme 51
  ipa 51
  stress
  Tone(50, 10, envelope/p_fall, NULL)
endphoneme

phoneme 52
  ipa 52
  stress
  Tone(50, 20, envelope/p_fall, NULL)
endphoneme

phoneme 53
  ipa 53
  stress
  Tone(50, 30, envelope/p_fall, NULL)
endphoneme

phoneme 55
  ipa 55
  stress
  Tone(50, 50, envelope/p_level, NULL)
endphoneme

phoneme 556
  stress
  Tone(50, 60, envelope/p_rise, envelope/vi_5amp)
endphoneme


//====================================================
//  Consonant
//====================================================

phoneme p
  vls blb stp
  lengthmod 2
  // Vowelin  f1=0  f2=1000 -50 -100  f3=-200 80 amp=11
  Vowelin  f1=0  f2=1000 -50 -100  f3=-200 80 amp=30
  Vowelout f1=0  f2=1000 -500 -350  f3=-300 80 rms=22
  // WAV(ustop/p_unasp)
  IF nextPh(isPause2) THEN
    WAV(NULL)
  ENDIF
  WAV(ustop/p)
endphoneme

phoneme ph
  vls blb stp
  lengthmod 2
  Vowelin  f1=0  f2=1000 -50 -100  f3=-200 80 amp=11
  Vowelout f1=0  f2=1000 -500 -350  f3=-300 80 rms=22
  WAV(ustop/p_asp)
endphoneme

// phoneme b
// endphoneme

phoneme mh
  vls blb nas
  lengthmod 4
  ipa m̥
  Vowelout f1=2  f2=1000 -500 -350  f3=-200 80 brk
  FMT(m/m#_, 10) addWav(ipa/mh)
endphoneme

phoneme m#
  vcd blb nas
  lengthmod 6
  ipa m#
  Vowelout f1=2  f2=1000 -500 -350  f3=-200 80 brk
  FMT(m/m#_)
endphoneme


phoneme m0
  vcd blb nas
  Vowelout f1=2 f2=1700 -300 250  f3=-100 80  rms=20 brk
  // lengthmod 4
  lengthmod 2

  NextVowelStarts
    VowelStart(m/m@)
    VowelStart(m/ma)
    VowelStart(m/me)
    VowelStart(m/mi)
    VowelStart(m/mo)
    VowelStart(m/mu)
  EndSwitch

  // IF nextPh(isNotVowel) THEN
    // length 190
    // FMT(m/m_)
  // ENDIF
  FMT(m/_m)
endphoneme

phoneme t
  vls alv stp
  lengthmod 2
  // Vowelin f1=0  f2=1700 -300 300  f3=-100 80  rms=40
  Vowelin f1=0  f2=1700 -300 300  f3=100 80
  // Vowelout f1=0 f2=1700 -300 250  f3=-100 80  rms=20
  // Vowelout f1=1 f2=1700 -300 250  f3=-100 80  rms=20
  Vowelout f1=1 f2=1700 -300 250  f3=-100 80  rms=20 len=15
  // WAV(ustop/t_unasp2, 40)
  IF nextPh(isPause2) THEN
     // WAV(NULL)
     //FMT(nn/nn_, 90)
     WAV(ustop/t_unasp2, 5)
  ENDIF
  // WAV(ustop/t)
  WAV(ustop/t_unasp2, 40)
endphoneme

phoneme th
  vls alv stp
  lengthmod 2
  Vowelin f1=0  f2=1700 -300 300  f3=-100 80
  Vowelout f1=0 f2=1700 -300 250  f3=-100 80  rms=20
  WAV(ustop/t_, 40)
endphoneme

// phoneme d
// endphoneme

phoneme nh
  vls alv nas
  ipa n̥
  lengthmod 6
  Vowelout f1=2 f2=1700 -300 250  f3=-100 80  rms=20 brk

  FMT(n/n#_, 30) addWav(ipa/nh)
endphoneme

phoneme n#
  vcd alv nas
  lengthmod 6
  ipa n#
  Vowelout f1=2 f2=1700 -300 250  f3=-100 80  rms=20 brk

  NextVowelStarts
    VowelStart(n/n@)
    VowelStart(n/na)
    VowelStart(n/ne)
    VowelStart(n/ni)
    VowelStart(n/no)
    VowelStart(n/nu)
  EndSwitch

  FMT(n/n#_)
endphoneme

phoneme n!
  vcd alv nas
  Vowelout f1=2 f2=1700 -300 250  f3=-100 80  rms=20 brk
  lengthmod 2

  NextVowelStarts
    VowelStart(n/n@)
    VowelStart(n/na)
    VowelStart(n/ne)
    VowelStart(n/ni)
    VowelStart(n/no)
    VowelStart(n/nu)
  EndSwitch

  IF nextPh(isNotVowel) THEN
    FMT(n/n_long_, 30)
  ENDIF
  FMT(n/_n)
endphoneme

phoneme n"  // ipa ɴ
  vcd uvl nas
  ChangePhoneme(N)  // FIXME
endphoneme

phoneme t.
  vls rfx stp
  lengthmod 2
  ipa ʈ
  voicingswitch d.
  Vowelin f1=0  f2=1800 -300 300  f3=-400 80
  Vowelout f1=0 f2=1800 -300 250  f3=-400 80  rms=20 colr=2
  WAV(ustop/t_short)
endphoneme

phoneme t.h
  vls rfx stp
  lengthmod 2
  ipa ʈh
  Vowelin f1=0  f2=1700 -300 300  f3=-100 80
  Vowelout f1=0 f2=1700 -300 250  f3=-100 80  rms=20
  WAV(ustop/th_rfx, 40)  // FIXME: placeholder
endphoneme

phoneme d.
  vcd rfx stp
  lengthmod 3
  ipa ɖ
  Vowelin f1=2  f2=1700 -300 300  f3=-100 80 amp=16
  Vowelout f1=2 f2=1700 -300 300  f3=-100 80

  IF nextPh(isPause2) THEN
    FMT(d/d_) addWav(x/d_)
  ELIF nextPh(r) THEN
    FMT(d/dr) addWav(x/d)
  ENDIF

  FMT(d/d) addWav(x/d, 50)
endphoneme

phoneme n.
  vcd rfx nas
  ipa ɳ
  starttype n  endtype n
  Vowelin f1=2 f2=1700 -300 300  f3=-500 80  rms=20 colr=2
  Vowelout f1=2 f2=1700 -300 300  f3=-500 80  rms=20 brk colr=2
  lengthmod 4

  IF KlattSynth THEN
    FMT(klatt/nr)
  ENDIF

  NextVowelStarts
    VowelStart(n/nr@)
    VowelStart(n/nra)
    VowelStart(n/nre)
    VowelStart(n/nri)
    VowelStart(n/nro)
    VowelStart(n/nru)
  EndSwitch

  IF prevPh(isNotVowel) AND nextPhW(isLiquid) THEN
    FMT(n/nj)
  ELIF prevPh(isPause) OR prevPh(n.) THEN
    FMT(n/_nr)
  ELIF nextPh(isNotVowel) THEN
    FMT(n/nr_)
  ENDIF
endphoneme

phoneme n^
  // vcd pal nas pzd
  vcd pal nas pzd alp sib frc
  ipa ɲ
  lengthmod 4
  Vowelout f1=3 f2=2500 300 500  f3=100 80  len=45 brk rate

  // IF KlattSynth THEN
    // VowelStart(klatt/n^@)
    // FMT(klatt/n^)
  // ENDIF

  // NextVowelStarts
    // VowelStart(n^/n^@)
    // VowelStart(n^/n^a)
    // VowelStart(n^/n^e)
    // VowelStart(n^/n^i)
    // VowelStart(n^/n^o)
    // VowelStart(n^/n^u)
  // EndSwitch

  // FMT(n^/n^_)
  // FMT(n^/n^_) addWav(voc/z_pzd, 80)
  FMT(n^/n^_) addWav(ufric/s_pzd, 40)
endphoneme

phoneme l'  // FIXME: placeholder
  liquid
  lengthmod 2

  CALL vowelstart_l

  IF nextPhW(#i) THEN
    VowelStart(l/li)
  ENDIF
  FMT(l/_l) addWav(ustop/ts, 140)
endphoneme

phoneme lh  //voiceless
  vls alv frc  // liquid
  ipa l̥
  lengthmod 3

  NextVowelStarts
    VowelStart(l/l@)
    VowelStart(l/la)
    VowelStart(l/le)
    VowelStart(l/li, -10)
    VowelStart(l/lo)
    VowelStart(l/lu)
  EndSwitch

  IF prevPh(isVowel) THEN
    VowelEnding(l/xl, -30)
  ENDIF

  WAV(ufric/l#, 10) addWav(ufric/tlh, 20)
endphoneme

phoneme l#   // Lateral fricative (eg. Welsh "ll")
  vls alv frc
  ipa ɬ
  lengthmod 3

  NextVowelStarts
    VowelStart(l/l@)
    VowelStart(l/la)
    VowelStart(l/le)
    VowelStart(l/li, -10)
    VowelStart(l/lo)
    VowelStart(l/lu)
  EndSwitch

  IF prevPh(isVowel) THEN
    VowelEnding(l/xl, -40)
  ENDIF

  WAV(ufric/l#, 40)
endphoneme

phoneme l
  liquid
  lengthmod 2

  CALL vowelstart_l

  IF nextPhW(#i) THEN
    VowelStart(l/li)
  ENDIF
  FMT(l/_l)
endphoneme

phoneme ts
  vls alv afr sib
  lengthmod 2
  Vowelin f1=0  f2=1700 -300 300  f3=-100 80
  Vowelout f1=0 f2=1700 -300 250  f3=-100 80  rms=20
  WAV(ustop/ts_unasp, 70)
endphoneme

phoneme tsh
  vls alv afr sib
  lengthmod 2
  Vowelin f1=0  f2=1700 -300 300  f3=-100 80
  Vowelout f1=0 f2=1700 -300 250  f3=-100 80  rms=20
  WAV(ustop/ts, 60)
endphoneme

phoneme dz
  vcd alv afr sib
  voicingswitch ts
  lengthmod 5
  Vowelin f1=1  f2=1700 -300 300  f3=-100 80 len=50
  Vowelout f1=2 f2=1700 -300 300  f3=-100 80

  IF PreVoicing THEN
    FMT(d/xd)
  ENDIF

  IF nextPh(isPause2) THEN
    FMT(voc/z_) addWav(ustop/ts2, 60)
  ENDIF
  FMT(d/xdz) addWav(ustop/ts2, 140)
endphoneme

// phoneme s
// endphoneme

phoneme sh
  import_phoneme base1/s  // FIXME
endphoneme

// phoneme z
// endphoneme

phoneme ts.
  vls pla frc sib
  lengthmod 3
  ipa tʂ
  Vowelin  f1=0  f2=1800 -100 300  f3=-300 80
  Vowelout f1=0  f2=1800 -100 300  f3=-300 80
  WAV(ustop/ts_rfx_unasp)
endphoneme

phoneme ts.h
  vls pla frc sib
  lengthmod 3
  ipa tʂʰ
  Vowelin  f1=0  f2=1800 -100 300  f3=-300 80
  Vowelout f1=0  f2=1800 -100 300  f3=-300 80
  WAV(ustop/ts_rfx)
endphoneme

phoneme dz.  // FIXME: bellow is dZ;
  vcd alp sib afr
  voicingswitch ts.
  ipa dʐ
  lengthmod 5
  Vowelin f1=2  f2=2700 400 600  f3=300 80 rate len=70
  Vowelout f1=2 f2=2700 400 600  f3=300 80

  IF PreVoicing THEN
    FMT(dzh/xdzh)
  ENDIF

  IF KlattSynth THEN
    IF nextPh(isPause2) THEN
      FMT(dzh/dzh_) addWav(x/dzh_)
    ENDIF
    FMT(dzh/dzh) addWav(x/dz_pzd)
  ENDIF

  IF nextPh(isPause2) THEN
    FMT(dzh/dzh_) addWav(x/dzh_)
  ENDIF
  FMT(dzh/dzh) addWav(x/dz_pzd)
endphoneme

phoneme s.
  vls pla frc sib
  lengthmod 3
  ipa ʂ
  Vowelin  f1=0  f2=1800 -100 300  f3=-300 80
  Vowelout f1=0  f2=1800 -100 300  f3=-300 80
  IF nextPh(isPause2) THEN
    WAV(ufric/sh_rfx, 50)
  ENDIF
  WAV(ufric/sh_rfx, 50)   // quieter
endphoneme

phoneme z.
  vcd pla frc sib
  ipa ʐ
  voicingswitch s.
  lengthmod 6
  Vowelin  f1=0  f2=1800 -100 300  f3=-300 80
  Vowelout f1=2  f2=1800 -100 300  f3=-300 80 brk

  IF KlattSynth THEN
    IF nextPh(isPause2) THEN
      FMT(klatt/zh_) addWav(vocw/zh_rfx)
    ENDIF
    FMT(klatt/zh) addWav(vocw/zh_rfx)
  ENDIF

  IF nextPh(isPause2) THEN
    FMT(voc/zh_) addWav(vocw/zh_rfx)
  ENDIF
  FMT(voc/zh) addWav(vocw/zh_rfx)
endphoneme

phoneme tS;  // FIXME: wrong sound?
  vls alp sib afr
  ipa tɕ
  lengthmod 2
  Vowelin f1=0  f2=2700 400 600  f3=300 80
  WAV(ustop/tsh_pzd_unasp)
endphoneme

phoneme tS;h
  vls alp sib afr
  ipa tɕh
  lengthmod 2
  Vowelin f1=0  f2=2700 400 600  f3=300 80
  WAV(ustop/tsh_pzd, 80)
endphoneme

phoneme dZ;
  vcd alp sib afr
  voicingswitch tS;
  ipa dʑ
  lengthmod 5
  Vowelin f1=2  f2=2700 400 600  f3=300 80 rate len=70
  Vowelout f1=2 f2=2700 400 600  f3=300 80

  IF PreVoicing THEN
    FMT(dzh/xdzh)
  ENDIF

  IF KlattSynth THEN
    IF nextPh(isPause2) THEN
      FMT(dzh/dzh_) addWav(x/dzh_)
    ENDIF
    FMT(dzh/dzh) addWav(x/dz_pzd)
  ENDIF

  IF nextPh(isPause2) THEN
    FMT(dzh/dzh_) addWav(x/dzh_)
  ENDIF
  FMT(dzh/dzh) addWav(x/dz_pzd)
endphoneme

phoneme S;
  vls pla frc sib
  lengthmod 2
  ipa ɕ
  Vowelin f1=0  f2=2700 400 600  f3=300 80
  WAV(ufric/sh_pzd2, 20)
endphoneme

phoneme Z;
  vcd alp sib frc
  voicingswitch S;
  ipa ʑ
  lengthmod 6
  Vowelin  f1=2  f2=2700 400 600  f3=300 80 rate len=70
  Vowelout f1=2  f2=2300 250 300  f3=-300 80 brk

  IF nextPh(isPause2) THEN
    FMT(voc/z_pzd_) addWav(ufric/sh_pzd_)
  ENDIF
  FMT(voc/z_pzd) addWav(ufric/sh_pzd, 80)
endphoneme

phoneme k
  vls uvl stp
  lengthmod 2
  Vowelin f1=1  f2=1700 0 200  f3=-300 80 f4
  // Vowelout f1=1 f2=1700 0 200  f3=-300 80 f4 rms=30
  Vowelout f1=1 f2=1700 0 200  f3=-300 80 f4 len=15
  IF thisPh(isWordEnd) THEN
    WAV(NULL)
  ENDIF
  WAV(ustop/k_unasp_, 10)
endphoneme

phoneme kh
  vls uvl stp
  lengthmod 2
  Vowelin f1=1  f2=1700 0 200  f3=-300 80 f4
  Vowelout f1=1 f2=1700 0 200  f3=-300 80 f4 rms=30
  WAV(ustop/k_asp, 80)
endphoneme

// phoneme g
// endphoneme

phoneme Nh
  vls vel nas
  lengthmod 6
  ipa ŋ̊
  Vowelout f1=3 f2=2300 300 400  f3=-200 80  len=40 rms=20 brk
  FMT(nn/nn#_, 30) addWav(ipa/nnh)
endphoneme

phoneme N!  // deprecated, was N
  vcd vel nas
  ipa ŋ
  // Vowelout f1=2 f2=1900 0 300  f3=400 80  len=50 rms=15 brk
  // lengthmod 7
  Vowelout f1=3 f2=2300 300 400  f3=-200 80  len=40 rms=20 brk
  lengthmod 8            // longer than 'n'

  NextVowelStarts
    VowelStart(nn/nn@)
    VowelStart(nn/nna)
    VowelStart(nn/nne)
    VowelStart(nn/nni)
    VowelStart(nn/nno)
    VowelStart(nn/nnu)
  EndSwitch

  IF prevPh(isPause) THEN
    FMT(nn/_nn)
  ELIF nextPh(isNotVowel) THEN
    // length 200
    // FMT(nn/nn2_)
    // length 150
	FMT(nn/nn_, 30)
  ENDIF
endphoneme

phoneme ng
  vwl //  starttype ng  endtype ng
  length 250
  FMT(nn/nn2_, 150) addWav(vowel/u#_2, 80)
endphoneme

phoneme ?'  // FIXME
  vls glt stp
  ChangePhoneme(?)
endphoneme

phoneme ?
  vls glt stp
  lengthmod 3
  ipa ʔ
  nolink
  Vowelin  glstop
  Vowelout glstop
  WAV(ustop/null)
endphoneme

phoneme j
  liquid pal
  lengthmod 1

  IF nextPhW(i) THEN
    WAV(NULL)
  ELIF nextPh(isVowel) THEN
    NextVowelStarts
      VowelStart(j/j@)
      VowelStart(j/ja)
      VowelStart(j/je)
      VowelStart(j/ji)
      VowelStart(j/jo)
      VowelStart(j/ju)
    EndSwitch

    VowelEnding(j/xj, -30)

    FMT(j/_j)
  ELSE
    // no vowel follows
    Vowelout len=70
    FMT(j/j_)
  ENDIF
endphoneme

phoneme h
  vls glt apr
  lengthmod 3
  ipa h

  IF nextPh(#@) THEN
    WAV(h/h@)
  ELIF nextPh(#a) THEN
    WAV(h/ha)
  ELIF nextPh(#e) THEN
    WAV(h/he)
  ELIF nextPh(#i) THEN
    WAV(h/hi)
  ELIF nextPh(#o) THEN
    WAV(h/ho)
  ELIF nextPh(#u) THEN
    WAV(h/hu)
  ENDIF
  WAV(h/h_, 70)  // no vowel following
endphoneme

phoneme h.  // FIXME h<?>
  vcd glt apr
  lengthmod 3
  ipa ɦ
  FMT(h/h_)  addWav(x/g2, 150)  // placeholder
endphoneme

// phoneme X
// endphoneme

phoneme g"
  vcd uvl frc
  ipa ʁ
  lengthmod 6

  IF nextPh(isPause2) THEN
    FMT(voc/Q_ulv) addWav(ufric/xx, 60)
  ENDIF
  FMT(voc/Q_ulv, 50) addWav(ufric/xx, 40)
endphoneme

phoneme q
  ipa q
  // import_phoneme base1/q        // FIXME
  vls uvl stp
  lengthmod 2
  Vowelin f1=1  f2=1700 0 200  f3=-300 80 f4
  Vowelout f1=1 f2=1700 0 200  f3=-300 80 f4 rms=30
  WAV(ustop/q, 12)
  // WAV(ipa/q)
endphoneme

phoneme qh
  ipa qʰ
  // import_phoneme  consonants/kh  //FIXME
  vls uvl stp
  lengthmod 2
  Vowelin f1=1  f2=1700 0 200  f3=-300 80 f4
  Vowelout f1=1 f2=1700 0 200  f3=-300 80 f4 rms=30
  WAV(ustop/k_asp2) addWav(ustop/q, 40)
endphoneme

phoneme G
  vcd uvl stp
  ipa ɢ
  ChangePhoneme(g)  // FIXME
  // lengthmod 5
  // Vowelin f1=2  f2=2300 200 300  f3=-300 80
  // Vowelout f1=2  f2=2300 250 300  f3=-300 80 brk
  // FMT(g/g) addWav(ustop/q, 40)
endphoneme

phoneme R
  // alv trl
  ipa ʀ
  import_phoneme base1/R
endphoneme

// FIXME: placeholder
phoneme b`
  // vcd blb imp
  vcd blb stp
  ipa ɓ
  lengthmod 3
  FMT(b/b) addWav(x/b)
endphoneme


phoneme f
  vls lbd frc
  ipa f
  voicingswitch v
  lengthmod 3
  Vowelout f1=0  f2=1000 -500 -350  f3=-200 80

  IF nextPh(isPause) THEN
    WAV(ufric/f_)
  ENDIF
  WAV(ufric/f)
endphoneme

phoneme fh
  vls lbd frc
  ipa fʰ
  lengthmod 2
  Vowelout f1=0  f2=1000 -500 -350  f3=-200 80
  WAV(ufric/f) addWav(h/h_, 150)  // FIXME
endphoneme

phoneme v.        // approximant, not fricative
  vcd lbd frc
  ipa ʋ
  lengthmod 6
  voicingswitch f
  Vowelin  f1=0  f2=1000 -300 -200  f3=-300 100
  Vowelout f1=0  f2=1000 -500 -300  f3=-300 60  len=50
  IF nextPh(isPause2) THEN
    FMT(voc/v_)
  ENDIF
  FMT(voc/v)
endphoneme

phoneme v
  vcd lbd frc
  ipa v
  voicingswitch f
  lengthmod 6
  Vowelin  f1=0  f2=1000 -300 -200  f3=-300 100
  Vowelout f1=0  f2=1000 -500 -300  f3=-300 60  len=50

  IF KlattSynth THEN
    Vowelout f1=1  f2=1000 -500 -300  f3=-300 60  len=50 brk
    IF nextPh(isPause2) THEN
      FMT(klatt/v_) addWav(vocw/v)
    ENDIF
    FMT(klatt/v) addWav(vocw/v, 150)
  ENDIF

  IF nextPh(isPause2) THEN
    FMT(voc/v_) addWav(vocw/v)
  ENDIF
  IF thisPh(isWordStart) AND nextPhW(isLiquid) THEN
    length 70
  ENDIF
  FMT(voc/v) addWav(vocw/v)
endphoneme

phoneme d`  // FIXME: placeholder
  vcd alv stp
  ipa ɗ
  lengthmod 3
  FMT(d/d) addWav(x/d)
endphoneme

phoneme tS
  vls pla afr sib
  ipa tʃ
  lengthmod 2
  Vowelin f1=0  f2=2300 200 400  f3=-100 80
  WAV(ustop/tsh_unasp)
endphoneme

phoneme tSh  // FIXME: bellow is tʂʰ
  vls pla frc sib
  ipa tʃʰ
  lengthmod 2
  Vowelin  f1=0  f2=1800 -100 300  f3=-300 80
  Vowelout f1=0  f2=1800 -100 300  f3=-300 80
  WAV(ustop/ts_rfx)
endphoneme

phoneme Sh
  import_phoneme base1/S  // FIXME: ʃ
  // ipa ʃʰ
endphoneme

phoneme S
  import_phoneme base1/S
  // ipa ʃ
endphoneme

phoneme Z
  import_phoneme base1/Z
  // ipa ʒ
endphoneme

phoneme dZ
  import_phoneme base1/dZ
  // ipa dʒ
endphoneme

phoneme ss
  ipa s͈
  import_phoneme base1/s  // FIXME: placeholder
endphoneme

phoneme c
  vls pal stp pzd
  ipa c
  lengthmod 2
  length 50
  Vowelin  f1=0  f2=2700 400 600  f3=300 80 len=15 brk
  Vowelout f1=1  f2=2700 400 600  f3=200 70 len=15 colr=1

  WAV(vietnam/ch,5)
endphoneme

phoneme kk  //  /ㄲ/
  vls vel stp
  ipa k͈
  lengthmod 3
  Vowelin f1=1  f2=1700 0 200  f3=-300 80 f4
  Vowelout f1=1 f2=1700 0 200  f3=-300 80 f4 rms=30
  WAV(ustop/k_unasp_, 75)
  length 100
endphoneme

phoneme x  // FIXME
  vls vel frc
  ipa x
  lengthmod 3
  Vowelin f1=0  f2=2300 200 400  f3=-100 80
  Vowelout f1=0 f2=2300 300 400  f3=-100 80  rms=20
  WAV(ufric/x_hr, 20)
endphoneme

phoneme Q
  vcd vel frc
  ipa ɣ
  lengthmod 6
  Vowelin f1=2  f2=2300 200 400  f3=-100 80
  Vowelout f1=2  f2=2300 250 300  f3=-300 80 brk

  IF KlattSynth THEN
    IF nextPh(isPause2) THEN
      FMT(klatt/qqh_) addWav(vocw/Q_)
    ENDIF
    FMT(klatt/qqh) addWav(vocw/Q)
  ENDIF

  IF nextPh(isPause2) THEN
    FMT(voc/Q_) addWav(vocw/Q_)
  ENDIF
  FMT(voc/Q) addWav(vocw/Q)
endphoneme

phoneme rh
  liquid rfx vls
  lengthmod 2
  ipa r̥
  FMT(r3/r#_, 10) addWav(ipa/rh)
endphoneme

phoneme r'
  liquid rfx
  lengthmod 3
  Vowelout f1=3 f2=1400 -400 300  f3=-400 80 rms=35 len=15 colr=2
  Vowelin  f1=2 f2=1400 -400 300  f3=-400 80 len=20
  FMT(r3/@tap_rfx) addWav(ustop/ts, 140)
endphoneme

phoneme r0  // deprecated
  liquid rfx
  // ipa r
  ipa ɽ
  lengthmod 3
  Vowelout f1=3 f2=1400 -400 300  f3=-400 80 rms=35 len=15 colr=2
  Vowelin  f1=2 f2=1400 -400 300  f3=-400 80 len=20

  FMT(r3/@tap_rfx)
endphoneme

phoneme r
  liquid trl
  lengthmod 6
  ipa r
  Vowelin  f1=0  f2=1500 -300 300  f3=-200 80 len=30 rms=60 brk
  Vowelout f1=2  f2=1500 -300 300  f3=-200 80
  // FMT(r3/r_trill_short) addWav(r3/r_trill.wav, 50)
  FMT(r3/r_ru2) addWav(r3/r_ru, 50)
endphoneme

phoneme r2
  import_phoneme base1/R
endphoneme

//====================================================
//  Vowels and Diphtnongs
//====================================================

procedure vowel_length_a_long
  IF nextPhW(p) OR nextPhW(t) OR nextPhW(k) OR nextPhW(?) THEN
	length 280  // 180
  ELIF nextPhW(n) OR nextPhW(m) OR nextPhW(N) THEN
	length 290  // 260
  ELIF nextPh(isNotVowel) THEN
	length 300
  ELSE
    length 370
  ENDIF
endprocedure

procedure vowel_length_a
  IF nextPhW(p) OR nextPhW(t) OR nextPhW(k) OR nextPhW(?) THEN
	length 150
  ELIF nextPhW(w) THEN
    IF next2PhW(p) OR next2PhW(t) OR next2PhW(k) OR next2PhW(?) THEN
	  length 130
    ELSE
	  length 200
    ENDIF
  ELIF nextPhW(u) THEN
	  length 180
  ELIF nextPhW(n) OR nextPhW(m) OR nextPhW(N) THEN
	length 180
  ELIF nextPhW(isVowel) OR prevPhW(isVowel) THEN
	length 200
  ELSE
    length 250
  ENDIF
endprocedure

procedure vowel_length_@
  IF nextPhW(p) OR nextPhW(t) OR nextPhW(k) OR nextPhW(?) THEN
	length 150
  ELIF nextPhW(w) THEN
    IF next2PhW(p) OR next2PhW(t) OR next2PhW(k) OR next2PhW(?) THEN
	  length 130
    ELSE
	  length 180
    ENDIF
  ELIF nextPhW(n) OR nextPhW(m) OR nextPhW(N) THEN
	length 180
  ELIF nextPh(isNotVowel) THEN
	length 185
  ELSE
    length 230
  ENDIF
endprocedure

procedure vowel_length_o_long
  IF nextPhW(p) OR nextPhW(t) OR nextPhW(k) OR nextPhW(?) THEN
	length 270  // 170
  ELIF nextPhW(n) OR nextPhW(m) OR nextPhW(N) THEN
	length 270  // 230
  ELIF nextPh(isNotVowel) THEN
	length 270
  ELSE
    length 330
  ENDIF
endprocedure

procedure vowel_length_o
  IF nextPhW(p) OR nextPhW(t) OR nextPhW(k) OR nextPhW(?) THEN
	length 135
  ELIF nextPhW(w) THEN
    IF next2PhW(p) OR next2PhW(t) OR next2PhW(k) OR next2PhW(?) THEN
	  length 130
    ELSE
	  length 180
    ENDIF
  ELIF nextPhW(n) OR nextPhW(m) OR nextPhW(N) THEN
	length 180
  ELIF nextPh(isNotVowel) THEN
	length 180
  ELSE
    length 220
  ENDIF
endprocedure

procedure vowel_length_e_long
  IF nextPhW(p) OR nextPhW(t) OR nextPhW(k) OR nextPhW(?) THEN
	length 270  // 170
  ELIF nextPhW(n) OR nextPhW(m) OR nextPhW(N) THEN
	length 270  // 230
  ELIF nextPh(isNotVowel) THEN
	length 270
  ELSE
    length 330
  ENDIF
endprocedure

procedure vowel_length_e
  IF nextPhW(p) OR nextPhW(t) OR nextPhW(k) OR nextPhW(?) THEN
	length 135
  ELIF nextPhW(w) THEN
    IF next2PhW(p) OR next2PhW(t) OR next2PhW(k) OR next2PhW(?) THEN
	  length 130
    ELSE
	  length 180
    ENDIF
  ELIF nextPhW(u) THEN
	length 180
  ELIF nextPhW(n) OR nextPhW(m) OR nextPhW(N) THEN
	length 180
  ELIF nextPhW(isNotVowel) THEN
	length 180
  ELSE
    length 220
  ENDIF
endprocedure

procedure vowel_length_e_short
  IF nextPhW(p) OR nextPhW(t) OR nextPhW(k) OR nextPhW(?) THEN
	length 90
  ELIF nextPhW(n) OR nextPhW(m) OR nextPhW(N) THEN
	length 120
  ELIF nextPh(isNotVowel) THEN
	length 120
  ELSE
    length 150
  ENDIF
endprocedure

procedure vowel_length_u_long
  IF nextPhW(p) OR nextPhW(t) OR nextPhW(k) OR nextPhW(?) THEN
	length 230  // 140
  ELIF nextPhW(n) OR nextPhW(m) OR nextPhW(N) THEN
	length 230  // 200
  ELIF nextPh(isNotVowel) THEN
	length 230
  ELSE
    length 280
  ENDIF
endprocedure

procedure vowel_length_u
  IF nextPhW(p) OR nextPhW(t) OR nextPhW(k) OR nextPhW(?) THEN
	length 150
  ELIF nextPhW(w) THEN
    IF next2PhW(p) OR next2PhW(t) OR next2PhW(k) OR next2PhW(?) THEN
	  length 130
    ELSE
	  length 200
    ENDIF
  ELIF nextPhW(n) OR nextPhW(m) OR nextPhW(N) THEN
	length 180  // 150
  ELIF nextPhW(i) THEN
	length 190  // 170
  ELIF nextPhW(isVowel) THEN
	length 80
  ELIF thisPh(isWordEnd) AND prevPhW(isNotVowel) THEN
	length 230  // 200
  ELIF nextPhW(isNotVowel) THEN
	length 200  // 170
  ELSE
    length 230  // 210
  ENDIF
endprocedure

procedure vowel_length_i_long
  IF nextPhW(p) OR nextPhW(t) OR nextPhW(k) OR nextPhW(?) THEN
	length 240  // 180
  ELIF nextPhW(n) OR nextPhW(m) OR nextPhW(N) THEN
	length 240  // 210
  ELIF nextPh(isNotVowel) THEN
	length 240
  ELSE
    length 300
  ENDIF
endprocedure

procedure vowel_length_i
  IF nextPhW(p) OR nextPhW(t) OR nextPhW(k) OR nextPhW(?) THEN
	length 120
  ELIF nextPhW(w) THEN
    IF next2PhW(p) OR next2PhW(t) OR next2PhW(k) OR next2PhW(?) THEN
	  length 100
    ELSE
	  length 90
    ENDIF
  ELIF nextPhW(n) OR nextPhW(m) OR nextPhW(N) THEN
	length 180  // 150
  ELIF nextPhW(isVowel) OR nextPhW(w) THEN
	length 90
  ELIF thisPh(isWordEnd) AND prevPhW(isNotVowel) THEN
	length 230  // 200
  ELSE
    length 200  // 180
  ENDIF
endprocedure

procedure vowel_length_i_short
  IF nextPhW(p) OR nextPhW(t) OR nextPhW(k) OR nextPhW(?) THEN
	length 120
  ELIF nextPhW(n) OR nextPhW(m) OR nextPhW(N) THEN
	length 150
  ELIF nextPhW(isVowel) OR nextPhW(w) THEN
	length 70
  ELIF thisPh(isWordEnd) AND prevPhW(isNotVowel) THEN
	length 190
  ELSE
    length 170
  ENDIF
endprocedure


phoneme ·
  vwl   starttype #@  endtype #@
  unstressed
  length 60
  FMT(vowel/@)
endphoneme

phoneme =
  vwl   starttype #@  endtype #@
  unstressed
  length 50
  FMT(vowel/@)
endphoneme

phoneme I
  vwl  starttype #i  endtype #i
  ipa ɪ  // ipa Ie
  CALL vowel_length_i // 130
  IfNextVowelAppend(;)
  FMT(vowel/ii)
endphoneme

phoneme U.
  vwl starttype #u endtype #u
  ipa O
  IF nextPhW(p) OR nextPhW(t) OR nextPhW(k) OR nextPhW(?) THEN
	length 90
  ELSE
    length 180
  ENDIF
  FMT(vowel/uu)
endphoneme

phoneme a
  vwl starttype #a endtype #a
  CALL vowel_length_a
  FMT(vowel/a)
endphoneme

phoneme e
  vwl starttype #e endtype #e
  CALL vowel_length_e
  // FMT(vowel/ee_1)
  FMT(vowel/e)
endphoneme

phoneme e-
  vwl starttype #e endtype #e
  CALL vowel_length_e_short
  FMT(vowel/e)
endphoneme

phoneme i
  vwl  starttype #i  endtype #i
  CALL vowel_length_i
  FMT(vowel/i)
endphoneme

phoneme r+i  // deprecated
  vwl starttype #i endtype #i
  ipa ɻi
  IF nextPh(ee) THEN
      CALL vowel_length_i_short
  ELSE
      CALL vowel_length_i_long
  ENDIF
  FMT(vowel/i)
endphoneme

phoneme ir
  vwl  starttype #i  endtype #i
  ipa i˞
  CALL vowel_length_i  // 140, next vowel 120, 230
  FMT(vowelr/i_r)
endphoneme

phoneme o
  vwl starttype #o endtype #o
  CALL vowel_length_e  // 90, , 180
  // FMT(vowel/o)
  IF nextPh(N) THEN
    FMT(vnasal/oo_n2)
  ENDIF
  FMT(vdiph2/o_oo)
endphoneme

phoneme uo
  vwl starttype #u endtype #o
  length 280
  FMT(vwl_zh/uo)
endphoneme

phoneme u
  vwl starttype #u endtype #u
  CALL vowel_length_u  // 90, next vowel 20, 180
  FMT(vowel/u)
endphoneme

phoneme w-
  vwl starttype #u endtype #u
  length 50
  FMT(vowel/u, 50)
endphoneme

phoneme &
  vwl  starttype #e  endtype #e
  ipa æ
  CALL vowel_length_e  // 100, 150, 220, 250
  FMT(vowel/ee_6)
endphoneme

phoneme r+&
  vwl  starttype #e  endtype #e
  ipa ɻæ
  CALL vowel_length_a_long
  FMT(vowel/ee_6)
endphoneme

phoneme &"
  vwl  starttype #@  endtype #@
  ipa ɐ
  CALL vowel_length_@  // 100, , 200
  FMT(vowel/a#_3)
endphoneme

phoneme A
  vwl starttype #a endtype #a
  ipa ɑ
  CALL vowel_length_a  // 100, 150, 220, 250
  IF nextPh(N) THEN
    FMT(vowel/aa_2)
  ENDIF
  FMT(vowel/a_3)
endphoneme

phoneme A.
  vwl starttype #a endtype #a
  ipa ɒ
  CALL vowel_length_a  // 100, 150, 220, 250
  IF nextPh(N) THEN
    FMT(vowel/aa_5)
  ENDIF
  FMT(vowel/a_2)
endphoneme

phoneme O
  vwl starttype #o endtype #o
  ipa ɔ
  CALL vowel_length_o  // 80, , 150
  FMT(vowel/oo_2)
endphoneme

phoneme r+O
  vwl starttype #o endtype #o
  ipa ɻɔ
  CALL vowel_length_o_long
  FMT(vowel/oo_2)
endphoneme

phoneme @
  vwl  starttype #@  endtype #@
  ipa ə
  CALL vowel_length_@  // 100, , 200
  FMT(vowel/@)
endphoneme

phoneme @;
  vwl  starttype #@  endtype #@
  ipa ɘ
  CALL vowel_length_@  // 100, , 200
  FMT(vowel/@_4)
endphoneme

phoneme E
  vwl starttype #e endtype #e
  ipa ɛ
  CALL vowel_length_e  // 90, , 200
  FMT(vowel/ee_5)
endphoneme

phoneme r+E
  vwl starttype #e endtype #e
  ipa ɻɛ
  CALL vowel_length_e_long
  FMT(vowel/ee_5)
endphoneme

phoneme o-
  vwl  starttype #o  endtype #o
  ipa ɤ
  CALL vowel_length_o  // 80, , 130
  FMT(vowel/8)
endphoneme

phoneme i"
  vwl starttype #i endtype #i
  ipa ɨ
  CALL vowel_length_i  // 90, , 180
  FMT(vowel/i#_4, 60)
endphoneme

phoneme y"
  vwl starttype #i endtype #i
  ipa ʉ
  CALL vowel_length_i  // 90, , 180
  FMT(vowel/yy_4) // FIXME: placeholder
endphoneme

phoneme ee
  vwl starttype #e endtype #e
  ipa E
  CALL vowel_length_e  // 100, , 220
  FMT(vowel/e_9)
endphoneme

phoneme a:
  vwl starttype #a endtype #a
  CALL vowel_length_a_long
  FMT(vowel/a)
endphoneme

phoneme e:
  vwl starttype #e endtype #e
  CALL vowel_length_e_long
  FMT(vowel/e)
endphoneme

phoneme i:
  vwl  starttype #i  endtype #i
  ipa iː
  CALL vowel_length_i_long
  FMT(vowel/i)
endphoneme

phoneme o:
  vwl starttype #o endtype #o
  ipa oː
  CALL vowel_length_o_long
  FMT(vowel/o)
endphoneme

phoneme u:
  vwl starttype #u endtype #u
  ipa uː
  CALL vowel_length_u_long
  FMT(vowel/u)
endphoneme

phoneme u-:
  ipa ɯ:
  vwl starttype #u endtype #u
  CALL vowel_length_u_long
  FMT(vowel/uu#_2)
endphoneme

phoneme Y
  vwl starttype #@ endtype #@
  ipa ø
  CALL vowel_length_@
  FMT(vowel/y#)
endphoneme

phoneme W
  vwl starttype #@ endtype #@
  ipa œ
  CALL vowel_length_@
  FMT(vowel/oe)
endphoneme

phoneme @r  // FIXME: bellow is V3_r
  vwl  starttype #@  endtype #@
  ipa ə˞
  length 350
  FMT(vowelr/V3_r)
endphoneme

phoneme u-
  ipa ɯ
  vwl starttype #u endtype #u
  CALL vowel_length_u  // length 130
  FMT(vowel/uu#_2)
endphoneme

phoneme @.  // FIXME: copied from zh_yue phoneme eo
  vwl  starttype #@  endtype #@
  ipa ɵ
  CALL vowel_length_@  // length 170
  length 170
  FMT(vowel/8_3)
endphoneme

phoneme U
  vwl starttype #u endtype #u
  ipa ʊ
  CALL vowel_length_u  // 90, , 180
  FMT(vowel/uu_2)
endphoneme

phoneme UN
  vwl starttype #o endtype #o
  length 300
  FMT(vwl_zh/ong)
endphoneme

phoneme V
  vwl  starttype #a  endtype #@
  ipa ʌ
  CALL vowel_length_@  // 140
  FMT(vowel/V_2)
endphoneme

phoneme ai
  vwl starttype #a endtype #i
  ipa ai
  length 250
  FMT(vdiph/ai_6)
endphoneme

phoneme au
  vwl starttype #a endtype #u
  ipa au
  length 250
  FMT(vdiph/au_2)
endphoneme

phoneme ei
  vwl starttype #e endtype #i
  ipa ei
  length 250
  FMT(vdiph2/ei_4)
  //FMT(vdiph/ei)  //yue
endphoneme

phoneme eu
  vwl starttype #e endtype #u
  ipa eu
  length 280
  FMT(vdiph/eu_2)
endphoneme

phoneme oi
  vwl  starttype #o  endtype #i
  ipa oi
  length 250
  FMT(vdiph/ooi)
endphoneme

phoneme &i
  vwl starttype #a endtype #i
  ipa æi
  length 315
  lng
  FMT(vdiph/&i)
endphoneme

phoneme &u
  vwl starttype #a endtype #u
  ipa æu
  length 250
  lng
  FMT(vdiph/au_2)
endphoneme

phoneme &"i
  ipa ɐi
  vwl starttype #a endtype #i
  length 270
  FMT(vdiph/ai_3)  // FIXME: placeholder
endphoneme

phoneme Ai
  vwl  starttype #a  endtype #i
  ipa ɑi
  length 310
  FMT(vdiph/aai_2)  // FIXME: placeholder
endphoneme

phoneme Au
  vwl starttype #a endtype #u
  ipa ɑu
  length 250
  FMT(vwl_zh/aau)
endphoneme

phoneme @i
  vwl starttype #@ endtype #i
  ipa əi
  length 220
  FMT(vdiph/@i)
endphoneme

phoneme Ei
  vwl starttype #e endtype #i
  ipa ɛi
  length 220
  FMT(vdiph/eei)
endphoneme

phoneme Eu
  vwl starttype #e endtype #u
  ipa ɛu
  length 250
  FMT(vdiph/eeu)
endphoneme

phoneme o-i
  vwl starttype #o endtype #i
  ipa ɤi
  length 220
  FMT(vdiph/ooi_3)  //FIXME ɔi
endphoneme

phoneme i"u
  vwl starttype #i endtype #u
  ipa ɨu
  length 250
  FMT(vdiph2/iu_4)
endphoneme

phoneme ou
  vwl starttype #o endtype #u
  ipa ou
  length 250
  FMT(vdiph/8u)
endphoneme

phoneme &"u  // FIXME: copied from zh_yue phoneme aau
  vwl starttype #a endtype #u
  ipa ɐu
  length 260
  FMT(vdiph/aau_2)
endphoneme

phoneme @u
  vwl starttype #@  endtype #u
  ipa əu
  IF thisPh(isFirstVowel) AND thisPh(isFinalVowel) AND thisPh(isWordEnd) THEN
	length 240
	ELSE
	length 200
	ENDIF
  FMT(vdiph/@u_3)
endphoneme

phoneme @.i
  vwl  starttype #@  endtype #i
  ipa ɵi
  length 220
  FMT(vdiph/y#y_2)
endphoneme


phoneme a~
  vwl  starttype #a  endtype #a
  length 190
  FMT(vnasal/aa_n4)
endphoneme

phoneme o~
  vwl  starttype #o  endtype #o
  length 190
  FMT(vnasal/o_n5)
endphoneme

phoneme e~
  vwl  starttype #e  endtype #e
  length 190
  FMT(vnasal/e_n)
endphoneme

phoneme &~
  vwl  starttype #e  endtype #e
  length 190
  FMT(vnasal/&_n)
endphoneme

phoneme i~
  vwl  starttype #i  endtype #i
  length 150
  FMT(vnasal/i_n2)
endphoneme

phoneme u~
  vwl  starttype #u  endtype #u
  length 100
  FMT(vnasal/u_n)
endphoneme

// TODO: ai~, au~, oi~, ou~, ui~

phoneme j"
  vwl starttype #i endtype #i
  ipa j̈
  unstressed
  length 70
  FMT(vowel/i#_4)  //FIXME: placeholder
endphoneme

phoneme w
  liquid
  starttype #u
  unstressed

  IF nextPh(isVowel) THEN
    length 40
    NextVowelStarts
      VowelStart(w/w@)
      VowelStart(w/wa)
      VowelStart(w/we)
      VowelStart(w/wi)
      VowelStart(w/wo)
      VowelStart(w/wu)
    EndSwitch

    VowelEnding(w/xw, -30)
	IF nextPh(isVowel) AND prevPhW(t[) THEN
		FMT(vnasal/u_n, 60)  addWav(vietnam/w, 50)
	ELIF prevPhW(isNasal) THEN
      FMT(w/w)
    ELSEIF prevPhW(h) THEN
      // none,  [hw]
    ELSE
      //FMT(w/_w) addWav(vietnam/w)
	  FMT(vietnam/_w)
    ENDIF
  ELIF prevPh(isVowel) THEN
    IF thisPh(isWordEnd) THEN
	  length 100
    ELSE
      length 60
    ENDIF
	FMT(vietnam/w_, 150)
  ELSE
    // no vowel follows
	length 80
    Vowelout len=20 rms=20
	FMT(vietnam/w_, 150)
  ENDIF
endphoneme

phoneme w"
  ipa ẅ
  unstressed
  // vwl  starttype #u  endtype #u
  liquid
  starttype #u

  length 70
  // FMT(vowel/yy_4) // FIXME: placeholder
  FMT(vowel/u#_5)
endphoneme

phoneme y
  ipa ɥ
  vwl  starttype #i  endtype #u
  IF nextPh(isVowel) THEN
    length 150
  ELSE
    length 250
  ENDIF
  FMT(vowel/y_2, 60)
endphoneme

phoneme r;  // FIXME: placeholder. deprecated.
  vcd alv flp rhotic
  ipa ɻ
  unstressed
  lengthmod 2
  Vowelout f1=3 f2=1600 -300 300  f3=-300 80 rms=35 len=15
  Vowelin f1=2  f2=1600 -300 300  f3=-100 80 len=20

  FMT(r3/@tap)
endphoneme

phoneme r.    //   retroflex
  liquid rfx
  ipa ɻ
  lengthmod 3
  length 90
  Vowelout f1=3 f2=1400 -400 300  f3=-400 80 rms=35 len=15 colr=2
  Vowelin f1=2  f2=1400 -400 300  f3=-400 80

  // IF prevPhW(isVowel) THEN
  // ELSE
  //   InsertPhoneme(·)
  // ENDIF

  // FMT(ipa/rfx_apr1)
  FMT(r3/@tap_rfx)  // good
  // FMT(r3/@tap_rfx, 60)
  // FMT(r3/r_trill,80) addWav(r3/r_trill.wav, 50)
endphoneme

phoneme r-   // syllabic, deprecated
  vwl  starttype #@  endtype #@
  ipa ɻ
  unstressed
  length 90
  // FMT(vowelr/r-voc)
  FMT(vowel/uu#_2)
  // WAV(ipa/rfx_apr)
endphoneme

phoneme *.  // copied from Japanese phoneme r`
  liquid rfx
  ipa ɽ
  lengthmod 3
  Vowelout f1=3 f2=1400 -400 300  f3=-400 80 rms=35 len=15 colr=2
  Vowelin  f1=2 f2=1400 -400 300  f3=-400 80 len=20

  FMT(r3/@tap_rfx)
endphoneme


phoneme ui
  vwl  starttype #u  endtype #i
  unstressed
  length 250
  FMT(vdiph/ui)
endphoneme

